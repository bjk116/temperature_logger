"""
For analyzing the data from temp.log
and then logging that.

Using python 2.7
"""

import os
import datetime
import pytz

def convert_timezone(dt, tz1, tz2):
    """
    Found this on stack overflow.  Necessary currently because our pi thinks
    its in UTC.  I'm leaving it in as it's decent real world practice for manipulating
    datat that isn't tidy or neat or the format you want.
    Args:
        dt: datetime string
        tz1: initial timezone
        tz2: desired timezone
    Returns:
        dt: datetime object
    """
    tz1 = pytz.timezone(tz1)
    tz2 = pytz.timezone(tz2)
    dt = datetime.datetime.strptime(dt, "%Y-%m-%d %H:%M:%S")
    dt = tz1.localize(dt)
    dt = dt.astimezone(tz2)
    dt = dt.strftime("%Y-%m-%d %H:%M:%S")
    return dt

def get_db_connection():
    """
    Included in this script for learnings sake
    Args:
        None, stuff is hard coded for ease of use
    Returns:
        cnx, connection object to local mysql db.
    """
    pass

def analyze_full_file(file_path='//home//projects//temperature_logger', file_name='temp.log'):
    """
    Scans in the entirety of the temp.log file, figures out the
    unique dates, gets the max, min, and average temperature, and
    then writes that to a file.
    Args:
        file_path: string, path to temp file.
    """
    try:
        with open(os.path.join(file_path, file_name), "r") as temperature_log_file:
            for line in temperature_log_file:
                stripped_line = line.strip()
                temperature, t_stamp = tuple(stripped_line.split(','))
                temperature = temperature.split('C')[0]
                print("temp is %s"%(str(temperature)))
                t_stamp = convert_timezone(t_stamp,'UTC','EST')
                print("t_stamp %s"%(str(t_stamp)))
                print("t_stamp type is %s"%(str(type(t_stamp))))
    except OSError:
        print("Could not open/read file:%s"%(str(file_path + file_name))

if __name__ == '__main__':
    try:
        analyze_full_file()
    except OSError:
        print("Issue with file path, not f
